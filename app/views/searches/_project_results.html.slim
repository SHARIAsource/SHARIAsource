- f = locals[:f]

p.result-count
  - desc = @filters.map(&:q).delete_if(&:empty?).present? ? " for \"#{@filters.map(&:q).join(' ')}\"" : ''
span.count= "#{@named_results.total_entries} #{'result'.pluralize(@named_results.total_entries)}#{desc}"
= f.input :sort, collection: [['Best Match', ''], ['Recent First', 'recent'], ['Oldest First', 'oldest'], ['Author Last Name', 'author']], include_blank: false, label: 'Sort by:', input_html: { name: 'sort' }

.result-list
  - @named_results.each do |result|
    - document = DocumentPresenter.new result
    .result
      .result-info
        p.breadcrumb
          - document.document_type.self_and_ancestors.reverse.each do |dt|
            = link_to dt.name, search_path(document_type: dt.self_and_descendant_ids, q: '')
            span= ' :: '
          span= document.dates

        h2= link_to document.title, document_path(document.object)
        = render partial: 'documents/byline', locals: { document: document }
        = render partial: 'searches/summary', locals: { document: document }

      .result-thumbnail
        = link_to(image_tag(document.thumb.url), document_path(document.object)) if document.thumb
  -if  @named_results.current_page > 1
    p.more-results= link_to 'Back', search_path(id: @filters.first.project.id, filter_ids: @filters.map(&:id), page: @named_results.previous_page), class: 'ss-button', id: "back", data: { remote: true }
  -if @named_results.total_pages != @named_results.current_page
    p.more-results= link_to 'Load More Results', search_path(id: @filters.first.project.id, filter_ids: @filters.map(&:id), page: @named_results.next_page), class: 'ss-button', id: "next", data: { remote: true }
/ there is some JS which routes clicks from the 'Load More Results' button to the hidden will_paginate controls, just made it quicker and easier to implement
=will_paginate @named_results
